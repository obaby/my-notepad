[GLOBENOTE]
LanguageChange=必须重新打开应用程序才能生效
Done=完成
OpenFileErr=打开 %s 文件遭遇错误
CreateBakFile=创建备份文件%s？

[GENERAL]
ButtonOk=确定(&O)
ButtonCancel=退出(&C)
CheckNoteAgain=下次不要提醒我(&A)



[PEINFOVIEWBAR]
DosHeader=DOS HEADER
e_magic=e_magic
e_magic_Idc=Magic number
e_cblp=e_cblp
e_cblp_Idc=Bytes on last page of file
e_cp=e_cp
e_cp_Idc=Pages in file
e_crlc=e_crlc
e_crlc_Idc=Relocations
e_cparhdr=e_cparhdr
e_cparhdr_Idc=Size of header in paragraphs
e_minalloc=e_minalloc
e_minalloc_Idc=Minimum extra paragraphs needed
e_maxalloc=e_maxalloc
e_maxalloc_Idc=Maximum extra paragraphs needed
e_ss=e_ss
e_ss_Idc=Initial (relative) SS value
e_sp=e_sp
e_sp_Idc=Initial SP value
e_csum=e_csum
e_csum_Idc=Checksum
e_ip=e_ip
e_ip_Idc=Initial IP value
e_cs=e_cs
e_cs_Idc=Initial (relative) CS value
e_lfarlc=e_lfarlc
e_lfarlc_Idc=File address of relocation table
e_ovno=e_ovno
e_ovno_Idc=Overlay number
e_res=e_res
e_res1=1
e_res1_Idc=Reserved words array 1
e_res2=2
e_res2_Idc=Reserved words array 2
e_res3=3
e_res3_Idc=Reserved words array 3
e_res4=4
e_res4_Idc=Reserved words array 4
e_oemid=e_oemid
e_oemid_Idc=OEM identifier (for e_oeminfo)
e_oeminfo=e_oeminfo
e_oeminfo_Idc=OEM information; e_oemid specific
e_restow=e_res2
e_restow1=1
e_restow1_Idc=Reserved words array 1
e_restow2=2
e_restow2_Idc=Reserved words array 2
e_restow3=3
e_restow3_Idc=Reserved words array 3
e_restow4=4
e_restow4_Idc=Reserved words array 4
e_restow5=5
e_restow5_Idc=Reserved words array 5
e_restow6=6
e_restow6_Idc=Reserved words array 6
e_restow7=7
e_restow7_Idc=Reserved words array 7
e_restow8=8
e_restow8_Idc=Reserved words array 8
e_restow9=9
e_restow9_Idc=Reserved words array 9
e_restow10=10
e_restow10_Idc=Reserved words array 10
e_lfanew=e_lfanew
e_lfanew_Idc=File address of new exe header
FileHeader=File Header
Machine=Machine
Machine_Idc=可执行文件的目标CPU。一般值是：IMAGE_FILE_MACHINE_I386    0x014c // Intel 386IMAGE_FILE_MACHINE_IA64    0x0200 // Intel 64
NumberOfSections=NumberOfSections
NumberOfSections_Idc=表明在区段表里有多少个区段。区段表紧跟在IMAGE_NT_HEADERS后面。
TimeDateStamp=TimeDateStamp
TimeDateStamp_Idc=表明文件是何时被创建的。这个值是自1970年1月1日以来用格林威治时间（GMT）计算的秒数，这个值是一个比文件系统的日期/时间更精确的文件创建时间指示器。一种比较简单的将这个值翻译为易读的字符串的方法是用_ctime函数（它是时区敏感型的），另一个对此域计算有用的函数是gmtime。
PointerToSymbolTable=PointerToSymbolTable
PointerToSymbolTable_Idc=COFF符号表的文件偏移位置。COFF符号表在PE文件中相对比较少见，因为较新的debug格式已经被采用，在Visual Studio .NET之前，COFF符号表可以通过设置链接器开关/DEBUGTYPE:COFF来创建。COFF符号表几乎总能在目标文件中找到，如果没有符号表 存在将此值设为0。
NumberOfSymbols=NumberOfSymbols
NumberOfSymbols_Idc=如果有COFF符号表，它代表其中的符号数目，COFF符号是一个大小固定的结构，如果想找到COFF符号表的结束处，这个域是需要的。紧跟在COFF符号 表后面的是一个用于放置较长符号名称的字符串表。
SizeOfOptionalHeader=SizeOfOptionalHeader
SizeOfOptionalHeader_Idc=跟在IMAGE_FILE_HEADER后面的可选数据大小。在PE文件中，这个数据结构叫IMAGE_OPTIONAL_HEADER，其大小依赖于是32位还是64位文件，对于32位PE文件，这个域通常是224；对64位PE32+文件，这个域是240，不管怎么样，这些 是要求的最小尺寸值，较大的值可能会出现。
Characteristics=Characteristics
Characteristics_Idc=标明文件属性的一套旗标。这些标志的有效值是定义于WINNT.H内的IMAGE_FILE_xxx值。
OptionalHeader=Optional Header

Magic=Magic
Magic_Idc=是一个标记字，确定这是什么类型的头部。两个最常见的值是IMAGE_NT_OPTIONAL_HDR32_MAGIC 0x10b和IMAGE_NT_OPTIONAL_HDR64_MAGIC 0x20b。
MajorLinkerVersion=MajorLinkerVersion
MajorLinkerVersion_Idc=用于编译这个执行文件的链接器的主版本。用微软的链接器生成的PE文件，这个版本号对应于Visual Studio的版本号（例如，version 6代表Visual Studio 6.0）。
MinorLinkerVersion=MinorLinkerVersion
MinorLinkerVersion_Idc=用于编译这个执行文件的链接器的亚版本。
SizeOfCode=SizeOfCode
SizeOfCode_Idc=所有带有IMAGE_SCN_CNT_CODE属性的区段的联结总尺寸。
SizeOfInitializedData=SizeOfInitializedData
SizeOfInitializedData_Idc=所有初始化数据区段的联结尺寸。
SizeOfUninitializedData=SizeOfUninitializedData
SizeOfUninitializedData_Idc=所有带有未初始化数据属性的区段尺寸。这个域经常是0，因为链接器能附加未初始化数据到常规数据区段的末端。
AddressOfEntryPoint=AddressOfEntryPoint
AddressOfEntryPoint_Idc=文件中将被执行的第一个代码字节处的RVA。对于DLL，这个入口点是在进程初始化和关闭时以及线程创建/毁灭时被呼叫。在大多数可执行文件中，这个地址并不直接指向main、WinMain或DllMain，而是指向运行时库代码 并由它来呼叫上述的函数。在DLL中这个域能被设置为0，前面提到的通知消息都不能收到，链接器/NOENTRY开关可以设置这个域为0。
BaseOfCode=BaseOfCode
BaseOfCode_Idc=当被装入内存中时，代码的第一个字节处的RVA。
BaseOfData=BaseOfData
BaseOfData_Idc=从理论上讲，当被装入内存中时，数据第一个字节处的RVA。可是，这个域的值对于不同版本的微软链接器是不一致的，在64位可执行文件中是不出现的。
ImageBase=ImageBase
ImageBase_Idc=文件在内存中的首选装入地址。如果有可能（也就是说，目前如果没有其他占据这块地址，它是正确对齐的并且是在一个合法的地址，等等），加载器试图在这个地址装入PE文件。如果可执行文件是在这个地址装入的，那么加载器将跳过应用基址重定位的步骤（将在这篇文章的第二部分描述）。对于EXE，缺省的ImageBase是0x400000；对于DLL，这个值是0x10000000。ImageBase值可以在链接时 用/BASE开关设置，或者链接后通过REBASE应用程序。
SectionAlignment=SectionAlignment
SectionAlignment_Idc=当被装入内存中时的区段对齐大小。这个大小必须大于或等于文件对齐域（下面提到）。缺省的对齐尺寸是目标CPU的页尺寸。对于运行在Windows 9x或Windows Me下的用户模式可执行文件，最小的对齐尺寸是一页（4KB）。这个域可以通过链接器的/ALIGN开关来设置。
FileAlignment=FileAlignment
FileAlignment_Idc=PE文件内的区段对齐大小。对于x86可执行文件，这个值通常是0x200或0x1000。用不同版本的微软链接器 缺省值会改变。这个值必须是2的幂，并且如果SectionAlignment小于CPU的页尺寸，这个域必须与SectionAlignment匹配。链接器开关/OPT:WIN98设置x86可执行文件的文件对齐为0x1000，/OPT:NOWIN98设置对齐为0x200。
MajorOperatingSystemVersion=MajorOperatingSystemVersion
MajorOperatingSystemVersion_Idc=需要的操作系统的主版本号。随着这么多版本的Windows的到来，这个域明显地变得不切题了。
MinorOperatingSystemVersion=MinorOperatingSystemVersion
MinorOperatingSystemVersion_Idc=需要的操作系统的亚版本号。
MajorImageVersion=MajorImageVersion
MajorImageVersion_Idc=文件的主版本号。它不被系统使用并可以设置为0，通过链接器的/VERSION开关它可以被设置。
MinorImageVersion=MinorImageVersion
MinorImageVersion_Idc=文件的亚版本号。
MajorSubsystemVersion=MajorSubsystemVersion
MajorSubsystemVersion_Idc=执行文件需要的操作子系统的主版本。曾经有一段时间，这个域被用来表示需要较新的Windows 95和Windows NT 4.0用户界面。相对于较旧版本的Windows NT界面来说，今天由于各种各样的Windows版本的出现，这个域显然不能被系统使用了，通常被设置为4，可以通过链接器开关/SUBSYSTEM来设置。
MinorSubsystemVersion=MinorSubsystemVersion
MinorSubsystemVersion_Idc=执行文件需要操作子系统的亚版本。
Win32VersionValue=Win32VersionValue
Win32VersionValue_Idc=另一个从来不用的域，通常被设置为0。
SizeOfImage=SizeOfImage
SizeOfImage_Idc=SizeOfImage包括RVA，其值将赋给跟在最后一个区段后面的区段（如果存在），这明显是系统将文件装入内存需要保留的内存数量，这个域值必须是区段对齐的倍数。
SizeOfHeaders=SizeOfHeaders
SizeOfHeaders_Idc=是MS-DOS头部、PE头部、区段表的组合尺寸。所有这些项目都出现在PE文件中任何代码或数据区段之前。域值四舍五入至文件对齐的倍数。
CheckSum=CheckSum
CheckSum_Idc=映像的校验和。在IMAGEHLP.DLL中的CheckSumMappedFile API可以计算这个值。校验和用于内核模式的驱动程序和系统DLL，否则，这个值可以设为0。当链接器的/RELEASE开关被使用时，校验和被置于文件中。
Subsystem=Subsystem
Subsystem_Idc= 一个标明可执行文件所期望的子系统（用户界面类型）的枚举值。这个值只对EXE是重要的。
DllCharacteristics=DllCharacteristics
DllCharacteristics_Idc=显示DLL特性的旗标。这些值对应于IMAGE_DLLCHARACTERISTICS_xxx域定义。
SizeOfStackReserve=SizeOfStackReserve
SizeOfStackReserve_Idc=在EXE文件里，进程中的线程初始堆栈能增加到的最大尺寸。缺省值是1MB，并不是所有这些内存在最开始时就被委派。
SizeOfStackCommit=SizeOfStackCommit
SizeOfStackCommit_Idc=在EXE文件里，一开始即被委派（committed ）给堆栈的内存数量。缺省值是4KB。
SizeOfHeapReserve=SizeOfHeapReserve
SizeOfHeapReserve_Idc=在EXE文件里，缺省process heap的初始保留尺寸。缺省值是1MB，但是在当前版本的Windows里，heap值在用户不干涉的情况下就能增 长超过这个值。
SizeOfHeapCommit=SizeOfHeapCommit
SizeOfHeapCommit_Idc=在EXE文件里，委派给heap的内存大小。缺省的，这个值是4KB。
LoaderFlags=LoaderFlags
LoaderFlags_Idc=很陈旧的一个域。
NumberOfRvaAndSizes=NumberOfRvaAndSizes
NumberOfRvaAndSizes_Idc=在IMAGE_NT_HEADERS结构的 结束处是一个IMAGE_DATA_DIRECTORY结构数组。这个域包括数组中的条目数量。这个域从最早的Windows NT发布以来一直是16。
DataDirectory=DataDirectory
DataDirectory_Idc=一个IMAGE_DATA_DIRECTORY结构数组。每个结构包括可执行文件中的一些重要部分的RVA和大小（例如输入表、输出表、资源）。
VirtualAddress=VirtualAddress
VirtualAddress_Idc=VirtualAddress
Size=Size
Size_Idc=Size
IMAGE_DIRECTORY_ENTRY_EXPORT=IMAGE_DIRECTORY_ENTRY_EXPORT
IMAGE_DIRECTORY_ENTRY_EXPORT_Idc=指向输出表(一个IMAGE_EXPORT_DIRECTORY结构）。
IMAGE_DIRECTORY_ENTRY_IMPORT=IMAGE_DIRECTORY_ENTRY_IMPORT
IMAGE_DIRECTORY_ENTRY_IMPORT_Idc=指向输入表(一个IMAGE_IMPORT_DESCRIPTOR结构的数组）。
IMAGE_DIRECTORY_ENTRY_RESOURCE=IMAGE_DIRECTORY_ENTRY_RESOURCE
IMAGE_DIRECTORY_ENTRY_RESOURCE_Idc=指向资源(一个IMAGE_RESOURCE_DIRECTORY结构）。
IMAGE_DIRECTORY_ENTRY_EXCEPTION=IMAGE_DIRECTORY_ENTRY_EXCEPTION
IMAGE_DIRECTORY_ENTRY_EXCEPTION_Idc=指向异常句柄表(一个IMAGE_RUNTIME_FUNCTION_ENTRY结构的数组）。 CPU特定的并且是基于表的异常处理，使用在除了x86系列的CPU上。
IMAGE_DIRECTORY_ENTRY_SECURITY=IMAGE_DIRECTORY_ENTRY_SECURITY
IMAGE_DIRECTORY_ENTRY_SECURITY_Idc=指向一列WIN_CERTIFICATE结构，它定义在WinTrust.H里。它不作为映像的一部分映射到内存中，因此VirtualAddress域是一个文件偏移位置，而不是RVA。
IMAGE_DIRECTORY_ENTRY_BASERELOC=IMAGE_DIRECTORY_ENTRY_BASERELOC
IMAGE_DIRECTORY_ENTRY_BASERELOC_Idc=指向基址重定位信息。
IMAGE_DIRECTORY_ENTRY_DEBUG=IMAGE_DIRECTORY_ENTRY_DEBUG
IMAGE_DIRECTORY_ENTRY_DEBUG_Idc=指向一个IMAGE_DEBUG_DIRECTORY结构的数组。每一个结构描述了映像的一些debug信息。早先的Borland的链接器设置这个IMAGE_DATA_DIRECTORY条目的Size域为结构的数目，而不是字节 大小，为了得到IMAGE_DEBUG_DIRECTORY结构的数目，用IMAGE_DEBUG_DIRECTORY的大小除以Size域。
IMAGE_DIRECTORY_ENTRY_ARCHITECTURE=IMAGE_DIRECTORY_ENTRY_ARCHITECTURE
IMAGE_DIRECTORY_ENTRY_ARCHITECTURE_Idc=指向架构体系特定的数据，其是一个IMAGE_ARCHITECTURE_HEADER结构的数组。它不用于x86或IA-64，但看来已被用于DEC/Compaq Alpha。
IMAGE_DIRECTORY_ENTRY_GLOBALPTR=IMAGE_DIRECTORY_ENTRY_GLOBALPTR
IMAGE_DIRECTORY_ENTRY_GLOBALPTR_Idc=VirtualAddress域中的RVA被用作在某一种架构体系上的全局指针（gp)。它不使用在x86上，而用于IA-64上。Size域没被使用，请查阅2000年11月的Under The Hood栏目，获取更多的关于IA-64 gp的信息。
IMAGE_DIRECTORY_ENTRY_TLS=IMAGE_DIRECTORY_ENTRY_TLS
IMAGE_DIRECTORY_ENTRY_TLS_Idc=指向线程局部存储（Thread Local Storage）初始化区段。
IMAGE_DIRECTORY_ENTRY_LOAD_CONFIG=IMAGE_DIRECTORY_ENTRY_LOAD_CONFIG
IMAGE_DIRECTORY_ENTRY_LOAD_CONFIG_Idc= 指向一个IMAGE_LOAD_CONFIG_DIRECTORY结构。IMAGE_LOAD_CONFIG_DIRECTORY结构里的信息是特定于Windows NT, Windows 2000, and Windows XP的（例如，GlobalFlag值）。为了将这个结构放入你的可执行文件里，你需要用名字__load_config_used定义一个全局结构，类型为IMAGE_LOAD_CONFIG_DIRECTORY。对于非x86架构体系，符号名字需要是_load_config_used（一个下横线）。如果你确实想包括一个IMAGE_LOAD_CONFIG_DIRECTORY，它是在C++代码里立即获取名字的一个技巧。给链接器看的符号名字必须完全写成__load_config_used（用两个下横线）。C++编译器给全局符号加上一个下横线，此外，它还用类型信息来修饰全局符号。所以，为了在C++中每一处都是正确的，你应该这样写：extern "C" IMAGE_LOAD_CONFIG_DIRECTORY _load_config_used = {...} 
IMAGE_DIRECTORY_ENTRY_BOUND_IMPORT=IMAGE_DIRECTORY_ENTRY_BOUND_IMPORT
IMAGE_DIRECTORY_ENTRY_BOUND_IMPORT_Idc=指向一个IMAGE_BOUND_IMPORT_DESCRIPTOR结构的数组。其对应这个映像绑定的每一个DLL，数组条目里时间戳允许加载器快速决定绑定是否是新的。如果是陈旧的，加载器将忽略绑定信息并且正常地解决输入的API。
IMAGE_DIRECTORY_ENTRY_IAT=IMAGE_DIRECTORY_ENTRY_IAT
IMAGE_DIRECTORY_ENTRY_IAT_Idc=指向第一个输入地址表（IAT）的开始。对于每个输入的DLL的IAT继而出现在内存中，Size域显示了所有IAT的总的大小。在加载器解决输入时，使用这个地址和大小来临时地标记IAT为读写。
IMAGE_DIRECTORY_ENTRY_DELAY_IMPORT=IMAGE_DIRECTORY_ENTRY_DELAY_IMPORT
IMAGE_DIRECTORY_ENTRY_DELAY_IMPORT_Idc=指向延迟装入信息，其是一个CImgDelayDescr结构的数组。定义来自于Visual C++里的DELAYIMP.H。延迟装入的DLL直到对它里面的API第一次呼叫发生时才被装入。在Windows里没有绝对的关于延迟装入DLL的知识，注意这一点是很重要的。延 迟装入的特征完全是由链接器和运行时库来完成的。
IMAGE_DIRECTORY_ENTRY_COM_DESCRIPTOR=IMAGE_DIRECTORY_ENTRY_COM_DESCRIPTOR
IMAGE_DIRECTORY_ENTRY_COM_DESCRIPTOR_Idc=在最近升级的系统头文件里，这个值已经改名为IMAGE_DIRECTORY_ENTRY_COMHEADER。它指向可执行文件的.NET信息中的最高级别信息 ，包括元数据。这种信息是以一个IMAGE_COR20_HEADER结构形式存在。

SectionHeader=SectionHeader
Section=Section
SectionName=Name
SectionName_Idc=The ASCII name of the section. A section name is not guaranteed to be null-terminated. If you specify a section name longer than eight characters, the linker truncates it to eight characters in the executable. A mechanism exists for allowing longer section names in OBJ files. Section names often start with a period, but this is not a requirement. Section names with a $ in the name get special treatment from the linker. Sections with identical names prior to the $ character are merged. The characters following the $ provide an alphabetic ordering for how the merged sections appear in the final section. There's quite a 位 more to the subject of sections with $ in the name and how they're combined, but the details are outside the scope of this article
Misc=PhysicalAddress
Misc_Idc=Indicates the actual, used size of the section. This field may be larger or smaller than the SizeOfRawData field. If the VirtualSize is larger, the SizeOfRawData field is the size of the initialized data from the executable, and the remaining bytes up to the VirtualSize should be zero-padded. This field is set to 0 in OBJ files.
SECTION_VirtualAddress=VirtualAddress
SECTION_VirtualAddress_Idc=In executables, indicates the RVA where the section begins in memory. Should be set to 0 in OBJs.
SizeOfRawData=SizeOfRawData
SizeOfRawData_Idc=The size (in bytes) of data stored for the section in the executable or OBJ. For executables, this must be a multiple of the file alignment given in the PE header. If set to 0, the section is uninitialized data.
PointerToRawData=PointerToRawData
PointerToRawData_Idc=The file offset where the data for the section begins. For executables, this value must be a multiple of the file alignment given in the PE header.
PointerToRelocations=PointerToRelocations
PointerToRelocations_Idc=The file offset of relocations for this section. This is only used in OBJs and set to zero for executables. In OBJs, it points to an array of IMAGE_RELOCATION structures if non-zero.
PointerToLinenumbers=PointerToLinenumbers
NumberOfRelocations=NumberOfRelocations
NumberOfRelocations_Idc=The number of relocations pointed to by the PointerToRelocations field. Should be 0 in executables.
NumberOfLinenumbers=NumberOfLinenumbers
NumberOfLinenumbers_Idc=The number of line numbers pointed to by the NumberOfRelocations field. Only used when COFF line numbers are emitted.
Characteristics=Characteristics
Characteristics_Idc=Flags OR'ed together, indicating the attributes of this section. Many of these flags can be set with the linker's /SECTION option. Common values include those listed in Figure 7.

[HexEditStatus]
Page=页
FileSize=文件大小:%d
FileSize1=块大小:%d
Block=开始:%xh 结束:%xh
Block1=相对偏移:%08lxh
Status=撤销:%d步,重做:%d步
Status1=*撤销:%d步,重做:%d步
Offset=偏移:%08lxh

[HexEditFindDialog]
DialogWindowText=搜索
STATIC_FIND=搜索
STATIC_REPLACE=替换为
STATIC_DIRECTION=方向
BUTTON_REPLACEALL=全部替换(&A)
BUTTON_REPLACE=替换(&R)
BUTTON_FIND=搜索(&F)
BUTTON_CANCEL=退出(&C)
CHECK_FINDASCII=搜索ASCII码(&S)
CHECK_MATCH=区分大小写(&E)
CHECK_WRAP=循环搜索(&W)
RADIO_UP=向上(&U)
RADIO_DOWN=向下(&D)


[HexEditUndoRedo]
UndoRedoTip=恢复数据可能会需要一段时间，你确信要恢复?
UndoFinish=必须等待处理完undo数据以后才能undo
UndoEmpty=undo序列为空


[DisAsmStatus]
DisAsmCodeTip=反汇编代码段
DisAsmEntryTip=反汇编入口段
DisposeCall=处理调用
DisposeJmp=处理跳转
DisposeImport=处理输入表等调用

[PEDUMP]
AnalysisResources=分析资源
AnalysisMenus=分析菜单
AnalysisDialogs=分析对话框
AnalysisImports=分析输入表
ParseImports=解析函数
AnalysisExports=分析输出表


[ERRORMESSAGE]
JMPERR=跳转到到%08X失败!
CALLERR=调用%08X失败!

[EXPORTTXTFILE]
SAVEDIALOGTITLE=TXT文件
SAVEDIALOGFILTER=导出TXT文件(*.TXT)\0*.TXT\0全部文件(*.*)\0*.*\0
OPENERR=打开%s文件出错!
DONE=导出完成

[IMPORTLISTBAR]
BarName=输入表调用
DisposeImport=正在扫描import
NoFindMsg=搜索到结尾没有发现%s是否从开始搜索
OptionName=输入表
EnableaddAC=自动拼写搜索(&A)
ExpandTree=自动展开(&E)

[EXPORTLISTBAR]
BarName=输出表调用
DisposeExport=正在扫描输出表
NoFindMsg=搜索到结尾没有发现%s是否从开始搜索
NoExport=没有输出表


[STRINGLISTBAR]
BarName=字符串调用
DisposeString=正在扫描String
NoFindMsg=搜索到结尾没有发现%s是否从开始搜索
OptionName=字符串搜索
EnableaddAC=自动拼写搜索(&A)
ExpandTree=自动展开(&E)

[JMPCALLBAR]
BarName=调用和跳转信息
BuiltJmpTree=分析跳转信息
BuiltCallTree=分析调用信息
ByJmp=_被跳转地址
Jmper=_跳转地址
ByCall=_被调用地址
Caller=_调用地址

[SEARCHLISTBAR]
BarName=搜索结果
Searching=正在搜索
NoFind = 没有找到 %s
PeAnalysisResultBarName=Pe分析结果

[CJCONTENTBAR]
OptionName=直接内容
LineUp=前面显示
LineDown=后面显示
Automatic=缺省
Other=其他
m_eneip=显示EIP
m_endump=显示HEX
m_encontent=显示内容
m_enstring=显示字符串
m_staticColor=高亮颜色
m_staticFont=字体

[CCJANALYSISVIEW]
Title=所有对EIP: %08X的调用

[OPTIONS]
HexConfiguration=Hex编辑设置
DisasmConfiguration=反汇编设置
MainConfiguration=设置

[MAINOPTION]
Title=通常
SmartMenu=禁止智能菜单(&D)
RecentFiles=最大能列出的最近文件数目:
RecentFilesOverFlow=数值必须介于0和16之间
DropOpenMode=拖放后打开模式
AsmDropOpenMode=反汇编模式
HexDropOpenMode=十六进制模式
UserDropOpenMode=用户选择模式

[MAINDIALOGOPTION]
Title=对话框选项设置
AnimDialog=使用动画对话框
Afterimages=动画回放
TotalSteps=帧数:
Delay=动画时间:
AfterimagesOverFlow=回放时间必须为 0 到 32 之间
TotalStepsOverFlow=帧的大小必须为 0 到 255 之间
DelayOverFlow=动画时间必须为 0 到 99 之间

[MAINBOOKMARK]
Title=书签
Goto=跳转(&G)
Set=设定(&S)
Remove=删除(&R)
Close=关闭(&C)
ChangeName=改变名称(&N)
ClearAll=全部删除(&A)

[MAINCOMMENT]
Title=注释对话框
Goto=跳转(&G)
Set=注释(&M)
Remove=删除(&R)
Close=关闭(&C)
ChangeName=改变注释(&O)
ClearAll=删除所有(&A)

[CC32ASMVIEW]
jmperr=跳到%08X失败
ButtonOk=确定(&O)
ButtonCancel=退出(&C)
CheckNearEip=自动寻找有效EIP(&A)
GotoEipTitle=Eip跳转对话框
NoFind=没有发现字符串%s
CopyOver=你选择需要拷贝的行数很多，这样会很慢..你是否仍然继续拷贝?
Copying=正在拷贝

[CC32ASMDOC]
noexe=不是可执行文件
likedos=不是PE文件,到像个DOS文件
nope=不是PE文件
OpenErr=打开%s文件出错
TryHexOpen=反汇编失败，是否使用十六进制格式打开？

[HEXFINDDLG]
Hexadecimal=十六进制
ANSI String=ANSI 字符串
Decimal=十进制
Octal=八进制
Binary=二进制
Unicode=Unicode 字符串
InputInvalid=输入无效
staticFind=搜索
staticReplace=替换
staticSearchType=类型
buttonFind=下一个(&S)
buttonCancel=退出(&C)
buttonReplaceAll=全部替换(&A)
buttonReplace=替换(&R)
checkMatchCase=大小写敏感(&M)
checkSearchBack=往上搜索(&E)
checkAutoCPL=自动完成(&U)
RepalceSupply=仅仅十六进制和ANSI 字符串提供替换功能
ReplaceLongErr=替换的长度不一致
RepalceNoFind=没有发现
RepalceALLNoFind=没有可以替换的
RepalceALLFinish=替换完成


[HEXGOOFFSETDLG]
Title=跳转到..
ButtonOk=确定(&O)
ButtonCancel=退出(&C)
RelatBegain=文件开始(&B)
RelatEnd=文件结尾(&E)
RelatCurrent=现在位置
RelatCurrentBack=现在位置往上
Hex=16进制
Dec=10进制
Relative=相对于..
InvalidAddress=地址输入非法

[HEXDEFINEDLG]
Title=定义选择块
BlockBegain=块开始
BlockEnd=块结束
SelLenErr=块的开始或者结束的数值大于文件长度!请重新选择
CaretPos=光标定位于块的开始(&C)
BlockSize=块大小
RadioWithSize=大小定位(&S)
RadioWithPositon=位置定位(&P)
RadioHexBase=十六进制(&H)
RadioDecBase=十进制(&D)

[ASBGOOFFSETDLG]
ButtonOk=确定(&O)
ButtonCancel=退出(&C)
Title=跳转对话框

[ASBASSEMBLEDLG]
ButtonOk=汇编(&A)
ButtonCancel=退出(&C)
CheckNop=使用NOP填充(&N)
CheckKeepText=保持文本(&K)
checkMinCode=自动选择最小代码(&U)
Title=汇编对话框

[CREGISTER]
ButtonOk=保存(&S)
ButtonCancel=退出(&C)
StaicName=名称
StaicOrganize=组织
StaicEmail=联系地址
StaicHardId=注册标示
Title=注册
InfoErr=内容不能为空

[ASBDISPLAYPAGE]
Title=汇编模式颜色选项
HiTextColor=高亮前景色
HiBackColor=高亮背景色
TextColor=前景色
BackColor=背景色
Automatic=缺省
Other=其他
Font=字体

[C32ASMHEXVIEW]
NoFind=  没有找到!
NormalMode=普通模式(&N)
InsertMode=插入模式(&I)
SnapMode=内存快照模式(&S)
DirectMode=直接内存模式(&D)
OverMaxFormat=需要格式化的字符太多，这有可能导致程序没有响应，是否继续格式化字符？
StatusCursor=光标: %08X
StatusSelection=选择: %08X - %08X
StatusBytes=%u 字节
StatusValue=值=%02X
StatusFileLen=文件长度:%u bytes
PaseteInsertData=剪贴板数据将粘贴到偏移量%X.\0d     这将增加这个文件的大小！
PaseteReplaceData=剪贴板数据将替换偏移量%X的数据.\0d  这不会改变这个文件的大小！
DeleteSelection=删除选择的块将减小文件大小，继续么？

[HEXLAYOUTPAGE]
Title=版面
ROWS=行
PreROWS=每行显示
LeftPadding=Hex左面版距离
RightPadding=Hex右面版距离
Address=地址显示
HexAddress=地址使用16进制
DecAddress=地址使用10进制
FixToWindow=适应窗口

[HEXDISPLAYPAGE]
Title=颜色
Color=颜色设置
BKColor=背景色
Other=其他..
Default=缺省
SelectedColor=选中时候前景色
HEXODDColor=奇数行颜色
HEXEvenColor=偶数行颜色
HEXSelectOddColor=选中奇数行颜色
HEXSelectEvenColor=选中偶数行颜色
HEXModifyColor=改动过颜色
HEXSelectModifyColor=选中改动过颜色
HEXAddressColor=地址显示颜色
HEXCurrentLineForeColor=高亮当前行前景色
HEXCurrentLineBackColor=高亮当前行背景色
HEXAscIIColor=Ascii显示颜色
HEXSelectAscIIColor=选中Ascii时颜色
HEXHightCursor=高亮对应光标颜色
HEXDividBorder=分界线颜色
Misc=设置
HEXFont=字体
HEXControlChar=控制字符显示为
HEXExpendChar=显示扩展字符

[HEXGENERALPAGE]
Title=通常
AddressVisible=显示地址栏(&A)
AddressColon=地址栏结尾显示冒号(&C) 
AddressMidColon=地址栏中部显示冒号(&M)
AddressAutoResize=地址栏自动适应(&F)
EnableDragDrop=能否拖放数据(&D)
EnableLinkDrop=拖动文件使用插入模式(&P)
LowerHex=小写显示HEX(&L)
AsciiExpendChar=显示扩展字符(&E)
AsciiControlChar=显示控制字符(&O)
TypingReplacesSelection=输入时替换选择部分(&T)
CreateBakFile=创建备份文件(&G)
WatchMemoryChange=监视内存变化(&W)
DivideBorder=显示分割线(&V)
HightCursor=高亮对应光标(&H)
InsertModeDefault=缺省为插入模式(&S)
UseCreateFileMapping=使用文件映射(&U)
AsmBaseAddrFit=基址自动填充(&B)
BackupPrompt=备份时候提示(&P)

[HEXOPTIONFORMATCOPYPAGE]
Title=拷贝设置
Format1=菜单一
Format2=菜单二
Format3=菜单三
FormatName=菜单名称
FormatStartName=前面插入
FormatEndName=后面补充


[OPTIONDISASMPAGE]
Title=反汇编行为设置
AnalysisResource=分析资源(&R)
AnalysisMenu=分析菜单(&M)
AnalysisDialog=分析对话框(&D)
LogReport=使用跟踪报告
ParseSymbol=自定输入表分析(&E)
HiTextColor=高亮前景色
HiBackColor=高亮背景色
TextColor=前景色
BackColor=背景色
Automatic=缺省
Other=其他
Font=字体
ParseTitle=分析
DisplayTitle=显示
JmpLessOverFlow=深度值必须为0和9之间
JmpLess=跳转分析的深度

[HEXINTERPRETER]
Title=数据解释器选项
SIGNED_BYTE=8 位,有符号
UNSIGNED_BYTE=8 位,无符号
SIGNED_SHORT=16 位,有符号
UNSIGNED_SHORT=16 位,无符号
SIGNED_LONG=32 位,有符号
UNSIGNED_LONG=32 位,无符号
SIGNED_QUAD=64 位,有符号
UNSIGNED_QUAD=64 位,无符号
FLOAT=32 位,Float
DOUBLE=64 位,Double
DOS_TIME=16 位,Dos Time
DOS_DATE=16 位,Dos Date
TIME_T=32 位,Dos time_t
FILMTIME=64 位,FilmTime
DISASM=? 位,反汇编
Explain=位数
Name=名称
Value=数值

[TOOLSTRANSFORMCODE]
ButtonOk=确定(&O)
ButtonCancel=退出(&C)
buttonClear=清除(&L)
buttonSaveBin=保存Bin(&S)
buttonCopyHex=拷贝Hex(&H)
buttonCopyAsm=拷贝Asm(&A)
buttonUndo=撤销(&N)
buttonRedo=重做(&R)
staticAddress=地址(hex)
staticInput=输入
staticStatus=状态
staticCodeResult=代码
staticAsmResult=汇编符号
checkMinCode=自动选择最小代码(&U)
Title=汇编转换
SelectTitle=选择汇编码

[TOOLSHASHCAL]
ButtonOk=计算(&A)
ButtonCancel=退出(&C)
ButtonOpenFile=打开文件(&O)
radioHex=16进制(&H)
radioString=字符串(&S)
radioFile=文件(&F)
editHexInput=您没有选择任何字节用来计算散列值,您可以在这里输入16进制的数或者字符串来计算散列值
staticHashSelect=选择散列计算方式
staticHexInput=输入16进制
staticHashResult=结果
Title=计算散列值

[HEXFILLBLOCK]
ButtonOk=确定(&O)
ButtonCancel=退出(&C)
ButtonAdd=添加(&A)
ButtonDelete=删除(&D)
ButtonSelect=选择(&S)
staticForm=从
staticTo=到
staticPasses=选择
staticNewFileLen=新文件大小
staticFillLen=填充大小
staticInsertLen=插入数据大小
radioHex=使用16进制填充
radioRandom=使用随机的数值填充
FillTitle=填充数据
NewFileTitle=建立新文件
InsertTitle=插入数据
RandBig=随机的范围不能大于255
FromBigTo=随机开始的范围不能大于随机结束的范围
LengthIsZero=长度不能为0

[HEXMODIFYDATA]
FLIP16FALUT=选择的数据同2字节不匹配，是否需要自动校正?
FLIP32FALUT=选择的数据同4字节不匹配，是否需要自动校正?
FLIP64FALUT=选择的数据同8字节不匹配，是否需要自动校正?
REFlIPOK=选择数据已经匹配
CALEMPTY=计算操作的值不能为空
DISNUMZERO=位移次数不能为零
radioAdd=加(&A)
radioSub=减(&S)
radioMul=乘(&U)
radioDiv=除(&D)
radioMod=模(&M)
radioShiftLeft=算术左移(&L)
radioShiftRight=算术右移(&R)
radioRotateLeft=循环左移
radioRotateRight=循环右移
radioBlockLeft=字符块左移(&B)
radioBlockRight=字符块右移(&K)
radioUpperCase=字符大写(&U)
radioLowerCase=字符小写(&W)
radioInverseCase=大小写翻转(&I)
radioFlip=翻转(&F)
radioNeg=&Neg
radioNot=取反
radioXor=异或(&X)
radioOr=或(&O)
radioAnd=与(&N)
checkCal=十六进制(&H)
ButtonOk=确定(&O)
ButtonCancel=退出(&C)
Title=修改数据

[HEXVIEWERRORCODE]
OUTOFMEMORY=内存不足
ALREADYOPEN=文件已经打开
SHARINGVIOLATION=voilation sharing
ACCESSDENIED=没有权限
MEMMAP=memory map error
FILETOOBIG=文件太大
INVALIDOFFSET=无效的偏移
INVALIDLENGTH=无效的长度
INVALIDARG=无效的目标
MAXLINKEDFILES=连接文件已满
FILEERROR=文件错误
FAILEDTOFIND=没有找到
USERABORT=用户取消
FILEREADONLY=只读文件
DISKSPACE=硬盘空间不够
FILEQUICKSAVE=文件保存错误
FILENOLINKCURRENT=没有联接文件
FILENOINSERTCURRE=不能插入文件
FILEEMPTY=空文件
FILEINSERTFAILED=文件插入失败
NOSELECTION=没有选择
INSERTMODE=插入模式
FILEOPENFAIL=文件打开失败
FILESAVEFAIL=文件保存失败
FILECREATEFAIL=文件创建失败
FILEWRITEFAIL=文件写入失败
FILETOOSMALL=文件太小